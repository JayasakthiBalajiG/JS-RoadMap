{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18160\viewh14960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs20 \cf0 Suggestions:\
Meet 1:\
Splice - deleting an element from an array\
Compare two objects\
Merge two objects\
Closures\
\

\f1\b First 50 problems - 27th march 2024\
\

\f0\b0 1. Object.keys(obj_name).length ==0\
2. Spread operator, Object.assign()\
3. delete obj_name.obj_key\
4. Object.assign()\
5. For in clause\
6. Object.keys(obj_name).length\
7. Compare\
8. hasOwnProperty()\
9. Object.values(obj_name)\
10. fromEntries(arr_name)\
11. Obj to arr => sort(fun(a,b)\{return a[1]-b[1]\}) -> cuz 1st value of every array is the value of the property\
\
13. JSON.parse(JSON.stingfy(obj_name))\
14. JSON.stringfy(obj_name) == JSON.stringfy(obj_name)\
\
\
17. JSON.stringfy(arr_name.sort()) == same or common logic after sort\
18. convert the array into set, take away duplicates from a sorted array\
19. arr_name.flat(), arr_name.flat(Infinity)\
20. Array to set and compare set_name.has(i)\
21. Concat and change into set or normal logic\
22. Array difference\
23. Specific element\
24. Math.floor and random\
25. slice(start, end)\
26. 
\fs22 When an array with false elements are pushed to a new array - both the true and false values are pushed, but if the elements are checked whether it is truthy or filtered only true values are pushed.
\fs20 \
27. For and break\
28. Frequency of elements in an array\
\
30. Reversing the array\
31. Sort with specific key; sort -  a.age - b.age\
32. Max and min\
33. Sum\
34. Average\
35. Remove element\
36. Return last element\
\
39. Check ascending by checking last 2 nos\
\
41. 2nd largest element\
42. Flat the array with infinity and sort the flattened array\
43. Symmetric diff - union - intersection\
\
45. Nearest element - Math.abs -> minValue = infinity, count = null\
46. count++ normal logic\
47. Majority - normal logic\
48.arr_name.filter((i)=>I!==\'93value\'94)\
49. push and concat using for loops\
50. Normal logic\
\
\
\

\f1\b Arr to object 
\f0\b0 = Object.fromEntries(arr_name)\

\f1\b Obj to array 
\f0\b0 = Object.entries(obj_name)\
\

\f1\b Set to arr 
\f0\b0 = spread operator, Array.from(set_name)\

\f1\b Arr to set 
\f0\b0 = declaration = new Set(arr_name)\
\
\
12 15 16 29 37 38 40 44	\
\
\
\
To see again:\
Array functions - reduce(), map(), filter(), some()}